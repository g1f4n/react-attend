{"ast":null,"code":"import _slicedToArray from \"/home/pieroashady/VSCode/ReactProjects/txa/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/pieroashady/VSCode/ReactProjects/txa/client/src/views/Quiz.jsx\";\nimport React, { Component, useState } from 'react';\nimport { Form, Col, Row } from 'react-bootstrap';\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionCounter: 0,\n      answer: null,\n      score: 0,\n      myQuestion: [{\n        question: 'Who invented JavaScript?',\n        answers: ['Douglas Crockford', 'Sheryl Sandberg', 'Brendan Eich'],\n        correctAnswer: 2\n      }, {\n        question: 'Which one of these is a JavaScript package manager?',\n        answers: ['Node.js', 'TypeScript', 'npm'],\n        correctAnswer: 2\n      }, {\n        question: 'Which tool can you use to ensure code quality?',\n        answers: ['Angular', 'jQuery', 'RequireJS'],\n        correctAnswer: 2\n      }, {\n        question: 'Foxy joxe?',\n        answers: ['Nore', 'Fret', 'RequireJS'],\n        correctAnswer: 2\n      }],\n      answerKey: [2, 2, 2, 2]\n    };\n    this.onSelect = this.onSelect.bind(this);\n  }\n\n  componentDidMount() {// if (this.state.questionCounter >= 2) {\n    // \tthis.setState({ questionCounter: 0 });\n    // }\n  }\n\n  onSelect(e) {\n    e.preventDefault();\n    this.setState({\n      answer: e.target.label\n    });\n    console.log(this.state.answer);\n  }\n\n  checkResult() {}\n\n  shuffle(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  render() {\n    const _this$state = this.state,\n          myQuestion = _this$state.myQuestion,\n          questionCounter = _this$state.questionCounter;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Row,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      as: \"legend\",\n      column: true,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 6\n      }\n    }, \"Radios\"), /*#__PURE__*/React.createElement(Col, {\n      sm: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(QuestionBox, {\n      question: myQuestion[questionCounter].question,\n      option: myQuestion[questionCounter].answers,\n      correctAnswer: myQuestion[questionCounter].correctAnswer,\n      currentIndex: questionCounter,\n      totalQuestion: this.state.myQuestion.length,\n      result: this.checkResult,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        if (this.state.questionCounter == this.state.myQuestion.length - 1) {\n          console.log(this.state.questionCounter);\n          return this.setState({\n            questionCounter: 0\n          });\n        }\n\n        this.setState(prevState => ({\n          questionCounter: prevState.questionCounter + 1\n        }));\n        console.log(this.state.questionCounter);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }\n    }, \"Next\"));\n  }\n\n}\n\nfunction QuestionBox({\n  question,\n  option,\n  correctAnswer,\n  currentIndex,\n  totalQuestion\n}) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        click = _useState2[0],\n        setClicked = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        answer = _useState4[0],\n        setAnswer = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        answerIndex = _useState6[0],\n        setIndex = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        select = _useState8[0],\n        setSelected = _useState8[1];\n\n  let selected = [];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 4\n    }\n  }, currentIndex + 1, \" of \", totalQuestion), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 4\n    }\n  }, question), option.map((text, index) => /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: answer === text ? 'red' : 'black',\n      border: '1px solid rgba(0, 0, 0, 0.2)',\n      borderColor: answer === text ? 'red' : 'black'\n    },\n    onClick: e => {\n      setClicked(true);\n      setAnswer(text);\n      setIndex(index);\n      selected.splice(currentIndex, 0, index);\n      setSelected(selected);\n      console.log(selected);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, text)));\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/pieroashady/VSCode/ReactProjects/txa/client/src/views/Quiz.jsx"],"names":["React","Component","useState","Form","Col","Row","Quiz","constructor","props","state","questionCounter","answer","score","myQuestion","question","answers","correctAnswer","answerKey","onSelect","bind","componentDidMount","e","preventDefault","setState","target","label","console","log","checkResult","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","render","prevState","QuestionBox","option","totalQuestion","click","setClicked","setAnswer","answerIndex","setIndex","select","setSelected","selected","map","text","index","color","border","borderColor","splice"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\nimport { Form, Col, Row } from 'react-bootstrap';\n\nclass Quiz extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tquestionCounter: 0,\n\t\t\tanswer: null,\n\t\t\tscore: 0,\n\t\t\tmyQuestion: [\n\t\t\t\t{\n\t\t\t\t\tquestion: 'Who invented JavaScript?',\n\t\t\t\t\tanswers: [ 'Douglas Crockford', 'Sheryl Sandberg', 'Brendan Eich' ],\n\t\t\t\t\tcorrectAnswer: 2\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tquestion: 'Which one of these is a JavaScript package manager?',\n\t\t\t\t\tanswers: [ 'Node.js', 'TypeScript', 'npm' ],\n\t\t\t\t\tcorrectAnswer: 2\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tquestion: 'Which tool can you use to ensure code quality?',\n\t\t\t\t\tanswers: [ 'Angular', 'jQuery', 'RequireJS' ],\n\t\t\t\t\tcorrectAnswer: 2\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tquestion: 'Foxy joxe?',\n\t\t\t\t\tanswers: [ 'Nore', 'Fret', 'RequireJS' ],\n\t\t\t\t\tcorrectAnswer: 2\n\t\t\t\t}\n\t\t\t],\n\t\t\tanswerKey: [ 2, 2, 2, 2 ]\n\t\t};\n\t\tthis.onSelect = this.onSelect.bind(this);\n\t}\n\tcomponentDidMount() {\n\t\t// if (this.state.questionCounter >= 2) {\n\t\t// \tthis.setState({ questionCounter: 0 });\n\t\t// }\n\t}\n\tonSelect(e) {\n\t\te.preventDefault();\n\t\tthis.setState({ answer: e.target.label });\n\t\tconsole.log(this.state.answer);\n\t}\n\tcheckResult() {}\n\tshuffle(array) {\n\t\tvar currentIndex = array.length,\n\t\t\ttemporaryValue,\n\t\t\trandomIndex;\n\n\t\t// While there remain elements to shuffle...\n\t\twhile (0 !== currentIndex) {\n\t\t\t// Pick a remaining element...\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\tcurrentIndex -= 1;\n\n\t\t\t// And swap it with the current element.\n\t\t\ttemporaryValue = array[currentIndex];\n\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\tarray[randomIndex] = temporaryValue;\n\t\t}\n\n\t\treturn array;\n\t}\n\trender() {\n\t\tconst { myQuestion, questionCounter } = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Form.Group as={Row}>\n\t\t\t\t\t<Form.Label as=\"legend\" column sm={2}>\n\t\t\t\t\t\tRadios\n\t\t\t\t\t</Form.Label>\n\t\t\t\t\t<Col sm={10}>\n\t\t\t\t\t\t{/* {myQuestion.map((x, i) => ( */}\n\t\t\t\t\t\t<QuestionBox\n\t\t\t\t\t\t\tquestion={myQuestion[questionCounter].question}\n\t\t\t\t\t\t\toption={myQuestion[questionCounter].answers}\n\t\t\t\t\t\t\tcorrectAnswer={myQuestion[questionCounter].correctAnswer}\n\t\t\t\t\t\t\tcurrentIndex={questionCounter}\n\t\t\t\t\t\t\ttotalQuestion={this.state.myQuestion.length}\n\t\t\t\t\t\t\tresult={this.checkResult}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/* ))} */}\n\t\t\t\t\t</Col>\n\t\t\t\t</Form.Group>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tif (this.state.questionCounter == this.state.myQuestion.length - 1) {\n\t\t\t\t\t\t\tconsole.log(this.state.questionCounter);\n\t\t\t\t\t\t\treturn this.setState({ questionCounter: 0 });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setState((prevState) => ({\n\t\t\t\t\t\t\tquestionCounter: prevState.questionCounter + 1\n\t\t\t\t\t\t}));\n\t\t\t\t\t\tconsole.log(this.state.questionCounter);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tNext\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction QuestionBox({ question, option, correctAnswer, currentIndex, totalQuestion }) {\n\tconst [ click, setClicked ] = useState(false);\n\tconst [ answer, setAnswer ] = useState('');\n\tconst [ answerIndex, setIndex ] = useState(0);\n\tconst [ select, setSelected ] = useState([]);\n\tlet selected = [];\n\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\t{currentIndex + 1} of {totalQuestion}\n\t\t\t</p>\n\t\t\t<p>{question}</p>\n\t\t\t{option.map((text, index) => (\n\t\t\t\t<p\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: answer === text ? 'red' : 'black',\n\t\t\t\t\t\tborder: '1px solid rgba(0, 0, 0, 0.2)',\n\t\t\t\t\t\tborderColor: answer === text ? 'red' : 'black'\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\tsetClicked(true);\n\t\t\t\t\t\tsetAnswer(text);\n\t\t\t\t\t\tsetIndex(index);\n\t\t\t\t\t\tselected.splice(currentIndex, 0, index);\n\t\t\t\t\t\tsetSelected(selected);\n\t\t\t\t\t\tconsole.log(selected);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{text}\n\t\t\t\t</p>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}
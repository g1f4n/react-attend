{"ast":null,"code":"import _slicedToArray from \"/home/pieroashady/VSCode/ReactProjects/txa/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/pieroashady/VSCode/ReactProjects/txa/client/src/views/Quiz.jsx\";\nimport React, { Component, useState } from 'react';\nimport { Form, Col, Row } from 'react-bootstrap';\n\nclass Quiz extends Component {\n  constructor(props) {\n    super(props);\n\n    this.checkAnswer = (answer, correctAnswer) => {\n      if (answer === correctAnswer) {\n        this.setState({\n          score: this.state.score + 10\n        });\n      }\n\n      this.setState({\n        responses: this.state.responses < 10 ? this.state.responses + 1 : 10\n      });\n    };\n\n    this.state = {\n      questionCounter: 0,\n      answer: '',\n      score: 0,\n      myQuestion: [{\n        question: 'Who invented JavaScript?',\n        answers: ['Douglas Crockford', 'Sheryl Sandberg', 'Brendan Eich'],\n        correctAnswer: 2\n      }, {\n        question: 'Which one of these is a JavaScript package manager?',\n        answers: ['Node.js', 'TypeScript', 'npm'],\n        correctAnswer: 2\n      }, {\n        question: 'Which tool can you use to ensure code quality?',\n        answers: ['Angular', 'jQuery', 'RequireJS'],\n        correctAnswer: 2\n      }, {\n        question: 'Foxy joxe?',\n        answers: ['Nore', 'Fret', 'RequireJS'],\n        correctAnswer: 2\n      }],\n      answerKey: [2, 2, 2, 2]\n    };\n    this.onSelect = this.onSelect.bind(this);\n  }\n\n  componentDidMount() {// if (this.state.questionCounter >= 2) {\n    // \tthis.setState({ questionCounter: 0 });\n    // }\n  }\n\n  onSelect(e) {\n    e.preventDefault();\n    this.setState({\n      answer: e.target.label\n    });\n    console.log(this.state.answer);\n  }\n\n  checkResult() {}\n\n  shuffle(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  render() {\n    const _this$state = this.state,\n          myQuestion = _this$state.myQuestion,\n          questionCounter = _this$state.questionCounter;\n    const answerKey = myQuestion[questionCounter].correctAnswer;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      as: Row,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Form.Label, {\n      as: \"legend\",\n      column: true,\n      sm: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 6\n      }\n    }, \"Radios\"), /*#__PURE__*/React.createElement(Col, {\n      sm: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(QuestionBox, {\n      question: myQuestion[questionCounter].question,\n      option: myQuestion[questionCounter].answers,\n      correctAnswer: myQuestion[questionCounter].correctAnswer,\n      currentIndex: questionCounter,\n      totalQuestion: this.state.myQuestion.length,\n      result: answer => this.checkAnswer(answer, answerKey),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        if (this.state.questionCounter == this.state.myQuestion.length - 1) {\n          console.log(this.state.questionCounter);\n          return this.setState({\n            questionCounter: 0\n          });\n        }\n\n        if (this.state.a) this.setState(prevState => ({\n          questionCounter: prevState.questionCounter + 1\n        }));\n        console.log(this.state.questionCounter);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }\n    }, \"Next\"));\n  }\n\n}\n\nfunction QuestionBox({\n  question,\n  option,\n  correctAnswer,\n  currentIndex,\n  totalQuestion,\n  result\n}) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        click = _useState2[0],\n        setClicked = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        answer = _useState4[0],\n        setAnswer = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        answerIndex = _useState6[0],\n        setIndex = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        select = _useState8[0],\n        setSelected = _useState8[1];\n\n  let selected = [];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 4\n    }\n  }, currentIndex + 1, \" of \", totalQuestion), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 4\n    }\n  }, question), option.map((text, index) => /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: answer === text ? 'red' : 'black',\n      border: '1px solid rgba(0, 0, 0, 0.2)',\n      borderColor: answer === text ? 'red' : 'black'\n    },\n    onClick: e => {\n      setClicked(true);\n      setAnswer(text);\n      setIndex(index);\n      result(index);\n      selected.push(index);\n      console.log(selected);\n      setSelected(select.concat(index));\n      console.log(index);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, text)));\n}\n\nexport default Quiz;","map":{"version":3,"sources":["/home/pieroashady/VSCode/ReactProjects/txa/client/src/views/Quiz.jsx"],"names":["React","Component","useState","Form","Col","Row","Quiz","constructor","props","checkAnswer","answer","correctAnswer","setState","score","state","responses","questionCounter","myQuestion","question","answers","answerKey","onSelect","bind","componentDidMount","e","preventDefault","target","label","console","log","checkResult","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","render","a","prevState","QuestionBox","option","totalQuestion","result","click","setClicked","setAnswer","answerIndex","setIndex","select","setSelected","selected","map","text","index","color","border","borderColor","push","concat"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\nimport { Form, Col, Row } from 'react-bootstrap';\n\nclass Quiz extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tquestionCounter: 0,\n\t\t\tanswer: '',\n\t\t\tscore: 0,\n\t\t\tmyQuestion: [\n\t\t\t\t{\n\t\t\t\t\tquestion: 'Who invented JavaScript?',\n\t\t\t\t\tanswers: [ 'Douglas Crockford', 'Sheryl Sandberg', 'Brendan Eich' ],\n\t\t\t\t\tcorrectAnswer: 2\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tquestion: 'Which one of these is a JavaScript package manager?',\n\t\t\t\t\tanswers: [ 'Node.js', 'TypeScript', 'npm' ],\n\t\t\t\t\tcorrectAnswer: 2\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tquestion: 'Which tool can you use to ensure code quality?',\n\t\t\t\t\tanswers: [ 'Angular', 'jQuery', 'RequireJS' ],\n\t\t\t\t\tcorrectAnswer: 2\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tquestion: 'Foxy joxe?',\n\t\t\t\t\tanswers: [ 'Nore', 'Fret', 'RequireJS' ],\n\t\t\t\t\tcorrectAnswer: 2\n\t\t\t\t}\n\t\t\t],\n\t\t\tanswerKey: [ 2, 2, 2, 2 ]\n\t\t};\n\t\tthis.onSelect = this.onSelect.bind(this);\n\t}\n\tcomponentDidMount() {\n\t\t// if (this.state.questionCounter >= 2) {\n\t\t// \tthis.setState({ questionCounter: 0 });\n\t\t// }\n\t}\n\n\tcheckAnswer = (answer, correctAnswer) => {\n\t\tif (answer === correctAnswer) {\n\t\t\tthis.setState({\n\t\t\t\tscore: this.state.score + 10\n\t\t\t});\n\t\t}\n\t\tthis.setState({ responses: this.state.responses < 10 ? this.state.responses + 1 : 10 });\n\t};\n\n\tonSelect(e) {\n\t\te.preventDefault();\n\t\tthis.setState({ answer: e.target.label });\n\t\tconsole.log(this.state.answer);\n\t}\n\tcheckResult() {}\n\tshuffle(array) {\n\t\tvar currentIndex = array.length,\n\t\t\ttemporaryValue,\n\t\t\trandomIndex;\n\n\t\t// While there remain elements to shuffle...\n\t\twhile (0 !== currentIndex) {\n\t\t\t// Pick a remaining element...\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\tcurrentIndex -= 1;\n\n\t\t\t// And swap it with the current element.\n\t\t\ttemporaryValue = array[currentIndex];\n\t\t\tarray[currentIndex] = array[randomIndex];\n\t\t\tarray[randomIndex] = temporaryValue;\n\t\t}\n\n\t\treturn array;\n\t}\n\trender() {\n\t\tconst { myQuestion, questionCounter } = this.state;\n\t\tconst answerKey = myQuestion[questionCounter].correctAnswer;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Form.Group as={Row}>\n\t\t\t\t\t<Form.Label as=\"legend\" column sm={2}>\n\t\t\t\t\t\tRadios\n\t\t\t\t\t</Form.Label>\n\t\t\t\t\t<Col sm={10}>\n\t\t\t\t\t\t{/* {myQuestion.map((x, i) => ( */}\n\t\t\t\t\t\t<QuestionBox\n\t\t\t\t\t\t\tquestion={myQuestion[questionCounter].question}\n\t\t\t\t\t\t\toption={myQuestion[questionCounter].answers}\n\t\t\t\t\t\t\tcorrectAnswer={myQuestion[questionCounter].correctAnswer}\n\t\t\t\t\t\t\tcurrentIndex={questionCounter}\n\t\t\t\t\t\t\ttotalQuestion={this.state.myQuestion.length}\n\t\t\t\t\t\t\tresult={(answer) => this.checkAnswer(answer, answerKey)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/* ))} */}\n\t\t\t\t\t</Col>\n\t\t\t\t</Form.Group>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tif (this.state.questionCounter == this.state.myQuestion.length - 1) {\n\t\t\t\t\t\t\tconsole.log(this.state.questionCounter);\n\t\t\t\t\t\t\treturn this.setState({ questionCounter: 0 });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.state.a)\n\t\t\t\t\t\t\tthis.setState((prevState) => ({\n\t\t\t\t\t\t\t\tquestionCounter: prevState.questionCounter + 1\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t\tconsole.log(this.state.questionCounter);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tNext\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction QuestionBox({ question, option, correctAnswer, currentIndex, totalQuestion, result }) {\n\tconst [ click, setClicked ] = useState(false);\n\tconst [ answer, setAnswer ] = useState('');\n\tconst [ answerIndex, setIndex ] = useState(0);\n\tconst [ select, setSelected ] = useState([]);\n\tlet selected = [];\n\n\treturn (\n\t\t<div>\n\t\t\t<p>\n\t\t\t\t{currentIndex + 1} of {totalQuestion}\n\t\t\t</p>\n\t\t\t<p>{question}</p>\n\t\t\t{option.map((text, index) => (\n\t\t\t\t<p\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tcolor: answer === text ? 'red' : 'black',\n\t\t\t\t\t\tborder: '1px solid rgba(0, 0, 0, 0.2)',\n\t\t\t\t\t\tborderColor: answer === text ? 'red' : 'black'\n\t\t\t\t\t}}\n\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\tsetClicked(true);\n\t\t\t\t\t\tsetAnswer(text);\n\t\t\t\t\t\tsetIndex(index);\n\t\t\t\t\t\tresult(index);\n\t\t\t\t\t\tselected.push(index);\n\t\t\t\t\t\tconsole.log(selected);\n\t\t\t\t\t\tsetSelected(select.concat(index));\n\t\t\t\t\t\tconsole.log(index);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{text}\n\t\t\t\t</p>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}